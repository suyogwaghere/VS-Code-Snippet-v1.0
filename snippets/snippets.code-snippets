{
    "dashboard" :{
		"prefix": "!@1dashboard",
		"body": [
			"const express = require('express')",
			"const app = express()",

			"app.get('/', function(req, res){",
			   " res.sendFile(__dirname + '/index.html');",
			"})",
			
			"app.listen(8080, function(error){",
			   " if(error) throw error",
			   " console.log('Server created Successfully on Port 8080')",
			"})"
		],
		"description": "This code for dashboard"
	},
	"local storage" :{
		"prefix": "!@2localStorage",
		"body": [
			"  // this newpage.html ",
			"function saveData(){",
				"let email,pass;",
				"email = document.getElementById('email').value",
				"pass = document.getElementById('pass').value",
				"localStorage.setItem('email',email);",
				"localStorage.setItem('email',pass);",
			"}",
			"  // this index.html ",
			"function getData(){",
				"// <body onload='getData();''>",
				"let email,pass;",
				"email = localStorage.getItem('email');",
				"pass = localStorage.getItem('pass');",
				"document.getElementById('email').value = email;",
				"document.getElementById('pass').value = pass;",
			"}"
		],
		"description": "This code for Local Storage script tag file"
	},
	"gitHub" :{
		"prefix": "!@3git",
		"body": [
			"git init",
			"git add .",
			"git commit -m 'message here'",
			"git remote add origin https://github.com/yourusername/yourreponame.git",
			"git push -u origin master",
			"git log",
			"git status"
		],
		"description": "This code for "
	},
    "dockerDemo" : {      
      	"prefix": "!@4docker", 
      	"body": [  
		"Docker commands",
		"docker --version",
		"docker images",
		"docker build -t imagename .",
		"docker run imagename",
		"for app.js file",
		"docker --version",
		"docker images",
		"cd demo",
		"docker build -t getstarted .",
		"docker run -dp 3000:3000 getstarted",
		"for app.js file",
		"console.log('Hi suyog');",
		"console.log('docker');",
		"for Dockerfile",
		"FROM node: alpine",
  		"COPY . /$1",
  		"CMD node /$1/script.js"
      	],
      	"description": "This code for Dockerfile"
    },
	"angularCode" : {
		"prefix": "!@5angular code",
		"body": [
			"angular commands",
			"npm install @angular/cli",
			"ng new project_name",
			"ng serve",
			"<style></style>",
			"<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css' integrity='sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T' crossorigin='anonymous'>",
			"<!-- Toolbar -->",
			"<div class='content' role='main'>",
			
			  "<!-- Highlight Card -->",
			  "<div class='card highlight-card card-small'>",
				"<span>{{ title }} app is running!</span>",
			  "</div>",
			  "<form>",
				"<div class='form-group' >",
				  "<label for='exampleInputEmail1'>Email address</label>",
				  "<input type='email' class='form-control' id='email' #email name='email' aria-describedby='emailHelp' placeholder='Enter email' >",
				  
				"</div>",
			  "<div class='form-group'>",
				"<label for='exampleInputPassword1'>Password</label>",
				"<input type='password' class='form-control' name='pass' id='pass' #pass placeholder='Password' >",
			  "</div>",
			  "<button type='submit' class='btn btn-primary' (click)='clickme(email.value,pass.value)'>Submit</button>",
			  
			"</form>",
			
			"<div class='m-5'>",
			  "<label >Email address : {{ demail }}</label><br>",
			  "<label >Password: {{ dpass }}</label>",
			"</div>",
			
			"</div>",

			"<router-outlet></router-outlet>",

			"import { Component } from '@angular/core';",

			"",

			"@Component({",
			  "selector: 'app-root',",
			  "templateUrl: './app.component.html',",
			  "styleUrls: ['./app.component.css']",
			"})",
			"export class AppComponent {",
			  "title = 'TE AIML';",
			  "demail='';",
			  "dpass='';",
			  "clickme(email:string,pass:string) {" ,
				  "this.demail=email;"  ,
				  "this.dpass=pass;"  ,
			   "}",
			"}"

		],
		"description": "This code for angular html and angularTS"
	},
	"nodeJS" :{
		"prefix": "!@6nodejs",
		"body": [
			"npm init",
			"npm install express",
			"node server.js",
			"const express = require('express')",
			"const app = express()",

			"app.get('/', function(req, res){",
			   " res.sendFile(__dirname + '/index.html');",
			"})",
			
			"app.listen(8080, function(error){",
			   " if(error) throw error",
			   " console.log('Server created Successfully on Port 8080')",
			"})"
		],
		"description": "This code for static website using nodejs app.js"
	},
	"crudAPI" :{
		"prefix": "!@7api",
		"body": [
			"// this is for app.js",
			"const express = require('express')",
			"const mongoose = require('mongoose')",
			"const url = 'mongodb://localhost/AlienDBex'",

			"const app = express()",

			"mongoose.connect(url, {useNewUrlParser:true})",
			"const con = mongoose.connection",

			"con.on('open', () => {",
			    "console.log('connected...')",
			"})",
			
			"app.use(express.json())",
			
			"const alienRouter = require('./routes/aliens')",
			"app.use('/aliens',alienRouter)",
			
			"app.listen(9000, () => {",
			    "console.log('Server started')",
			"})",
			"// this is for models/alien.js",
			"const mongoose = require('mongoose')",
			"const alienSchema = new mongoose.Schema({",
			    "name: {",
			        "type: String,",
			        "required: true",
			    "},",
			    "tech: {",
			        "type: String,",
			        "required: true",
			    "},",
			    "sub: {",
			        "type: Boolean,",
			        "required: true,",
			        "default: false",
			    "}",
			"})",
			"module.exports = mongoose.model('Alien',alienSchema)",
			"// this is for routes/aliens.js",
			"const express = require('express')",
			"const router = express.Router()",
			"const Alien = require('../models/alien')",


			"router.get('/', async(req,res) => {",
			    "try{",
			           "const aliens = await Alien.find()",
			           "res.json(aliens)",
			    "}catch(err){",
			        "res.send('Error ' + err)",
			    "}",
			"})",
			
			"router.get('/:id', async(req,res) => {",
			    "try{",
			           "const alien = await Alien.findById(req.params.id)",
			           "res.json(alien)",
			    "}catch(err){",
			        "res.send('Error ' + err)",
			    "}",
			"})",

			"router.post('/', async(req,res) => {",
			    "const alien = new Alien({",
			        "name: req.body.name,",
			        "tech: req.body.tech,",
			        "sub: req.body.sub",
			    "})",
			    "try{",
			        "const a1 =  await alien.save()", 
			        "res.json(a1)",
			    "}catch(err){",
			        "res.send('Error')",
			    "}",
			"})"	,
			"router.patch('/:id',async(req,res)=> {",
			    "try{",
			        "const alien = await Alien.findById(req.params.id) ",
			        "alien.sub = req.body.sub",
			        "// alien.name = req.body.name",
			        "// alien.tech = req.body.tech",
			        "const a1 = await alien.save()",
			        "res.json(a1)"   ,
			    "}catch(err){",
			        "res.send('Error')",
			    "}",
			
			"})",
			
			"router.delete('/:id',async(req,res)=> {",
			    "try{",
			        "const alien = await Alien.findById(req.params.id) ",
			        "const a1 = await alien.remove()",
			        "res.json(a1)"   ,
			    "}catch(err){",
			        "res.send('Error')",
			    "}",
			
			"})",
			"module.exports = router",
		],
		"description": "This code for static website using nodejs app.js"
	},
	"jqueryMobile" :{
		"prefix": "!@8jquerycode",
		"body": [
			"<!---index-->",
			"<div data-role='page'>",
		"<div data-role='header' data-theme='b'><center><h1>Simple JQuery Website</h1></center></div>",
		"<div data-role='navbar'>",
			"<ul>",
				"<li><a href='index.html' rel='external' class='ui-btn-active'>Home</a></li>",
				"<li><a href='loginregister.html' rel='external'>Login/Register</a></li>",
			"</ul>",
		"</div>",
		"<center><h3>Products</h3></center>",
		"<div class='content'>",
			"<center> ",
				"<div class='rows'><div><img src='image.jpg' height='250px' width='250px'></div></div>",
			"</center>",
		"</div><!---content close-->",
		"<div data-role='footer' data-theme='b'> ",
			"<center>",
				"<div class='quicklinks'><h3> Quick Links</h3>",
					"<a href='indexC.html' rel='external'>Home</a><br><br>",
				"</div>",
				"<p>TE AIML</p>",
			"</center>",
		"</div><!---footer close-->",
	"</div>",
				"<!---login-->",

			"<div data-role='page'>",
		"<div data-page='header' data-theme='b'>",
			"<center><h1>Simple JQuery Website</h1></center>",
	"</div>",
		"<div data-role='navbar' data-grid='c'>",
			"<ul>",
				"<li><a href='indexC.html' rel='external'>Home</a></li>",
				"<li><a href='loginregister.html' class='ui-btn-active'>Login/Register</a></li>",
			"</ul>",
		"</div class='content'>",
		"<div> <center> <h2>Registration</h2></center></div>",
		"<div data-role='content'>",
			"<label> Full Name:</label>",
			"<input type='text'> <br>",
			"<label> email:</label>",
			"<input type='Email'> <br>",
			"<label> password:</label>",
			"<input type='Password'> <br>",
			"<input type='submit' value='Register'><br>",
			"<center><a href='login.html'>Register</a></center>",
		"</div>",
	"</div>"



		],
		"description": "This are JQuery mobile code"
	},
	"bootstrap" :{
		"prefix": "!@cdnbootstraplinks",
		"body": [
			"<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css' />",
			"<script src='https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js' integrity='sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk' crossorigin='anonymous'></script>",
			"<script src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js' integrity='sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK' crossorigin='anonymous'></script>",
		],
		"description": "This are bootstrap cdn links"
	},
	"jquery" :{
		"prefix": "!@cdnjquerylinks",
		"body": [
			"<link rel='stylesheet' href='https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css' />",
			"<script src='https://code.jquery.com/jquery-1.11.1.min.js'></script>",
			"<script src='https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js'></script>"
		],
		"description": "This are JQuery cdn links"
	}
		
}